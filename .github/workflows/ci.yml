name: ci-cd-security
on:
  push:
  pull_request:

permissions:
  contents: read
  security-events: write

jobs:
  test:
    name: Unit tests (pytest) + coverage
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: 02-seguranca-containers
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov
      - name: Run tests + coverage (XML)
        run: |
          pytest --cov=./ --cov-report=xml:coverage.xml -q
      - name: Upload coverage as artifact (opcional)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: pytest-coverage-xml
          path: 02-seguranca-containers/coverage.xml

  build_docker_image:
    name: Build Docker Image & (on push) Push to Docker Hub
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t devsecops-app:latest ./02-seguranca-containers

      # Login e push APENAS em 'push' (secrets não existem em PR)
      - name: Docker Hub login (push only)
        if: ${{ github.event_name == 'push' }}
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "jeffersonpiau" --password-stdin

      - name: Tag Docker image
        if: ${{ github.event_name == 'push' }}
        run: |
          docker tag devsecops-app:latest jeffersonpiau/devsecops-app:latest
          docker tag devsecops-app:latest jeffersonpiau/devsecops-app:${{ github.sha }}

      - name: Push Docker image (latest & SHA)
        if: ${{ github.event_name == 'push' }}
        run: |
          docker push jeffersonpiau/devsecops-app:latest
          docker push jeffersonpiau/devsecops-app:${{ github.sha }}

  scan_docker_image:
    name: Trivy Scan (fail on CRITICAL)
    runs-on: ubuntu-latest
    needs: build_docker_image
    steps:
      - uses: actions/checkout@v4

      # Em PR: não tem secrets. Em push: faz login pra imagem privada, se necessário.
      - name: Docker Hub login (only on push)
        if: ${{ github.event_name == 'push' }}
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "jeffersonpiau" --password-stdin

      - name: Trivy image scan (CRITICAL -> fail) + SARIF
        uses: aquasecurity/trivy-action@0.22.0
        with:
          scan-type: 'image'
          # Em PR, ainda dá pra escanear se o repo no Docker Hub for público;
          # em push, o login acima cobre caso seja privado.
          image-ref: 'jeffersonpiau/devsecops-app:latest'
          severity: 'CRITICAL'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '1'

      - name: Upload Trivy SARIF
        if: ${{ always() }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

  dependency_check:
    name: OWASP Dependency-Check (docker)
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Prepare cache dir
        run: mkdir -p $HOME/dc-data reports

      - name: Run Dependency-Check (SARIF)
        continue-on-error: true
        run: |
          docker run --rm \
            -e NVD_API_KEY="${{ secrets.NVD_API_KEY }}" \
            -e JAVA_OPTS="-Xmx2g" \
            -v "$HOME/dc-data":/usr/share/dependency-check/data \
            -v "$PWD":/src \
            -v "$PWD/reports":/report \
            owasp/dependency-check:latest \
            --scan /src/02-seguranca-containers \
            --format "SARIF" --out /report --project "devsecops-app" \
            --failOnCVSS 0

      - name: List reports (debug)
        if: ${{ always() }}
        run: ls -lah reports || true

      - name: Upload Dependency-Check SARIF
        if: ${{ always() && hashFiles('reports/dependency-check-report.sarif') != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/dependency-check-report.sarif

      - name: Upload reports artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-reports
          path: reports/

  sonar:
    name: SonarQube scan (conditional)
    runs-on: ubuntu-latest
    needs: test
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    steps:
      - uses: actions/checkout@v4
      - name: SonarQube Scan
        if: ${{ env.SONAR_TOKEN != '' && env.SONAR_HOST_URL != '' }}
        uses: SonarSource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.organization=devjeffersonpiau
            -Dsonar.projectKey=devsecops-practical-tests
            -Dsonar.projectName=devsecops-practical-tests
            -Dsonar.sources=02-seguranca-containers
            -Dsonar.tests=02-seguranca-containers/tests
            -Dsonar.test.inclusions=**/tests/**
            -Dsonar.exclusions=**/tests/**
            -Dsonar.python.version=3.11
            -Dsonar.python.coverage.reportPaths=02-seguranca-containers/coverage.xml