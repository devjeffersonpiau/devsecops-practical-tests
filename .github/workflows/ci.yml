name: ci-cd-security
on:
  push:
  pull_request:

permissions:
  contents: read
  security-events: write
  packages: write

jobs:
  test:
    name: Unit tests (pytest) + coverage
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: 02-seguranca-containers
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov

      - name: Run tests + coverage (XML)
        run: |
          pytest --cov=./ --cov-report=xml:coverage.xml -q

      - name: Upload coverage as artifact (opcional)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: pytest-coverage-xml
          path: 02-seguranca-containers/coverage.xml

  build_and_scan_image:
    name: Build Docker & Trivy (fail on CRITICAL)
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image (local)
        run: docker build -t devsecops-app:latest ./02-seguranca-containers

      # Cache do banco do Trivy para acelerar próximos runs
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}-v1
          restore-keys: |
            trivy-db-${{ runner.os }}-

      - name: Trivy image scan (CRITICAL -> fail) + SARIF
        uses: aquasecurity/trivy-action@0.22.0
        with:
          scan-type: 'image'
          image-ref: 'devsecops-app:latest'
          severity: 'CRITICAL'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '1'
          cache-dir: ~/.cache/trivy

      - name: Upload Trivy SARIF
        if: ${{ always() }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

  dependency_check:
    name: OWASP Dependency-Check (docker)
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      # Diretórios de trabalho (cache e data)
      - name: Prepare dirs
        run: |
          mkdir -p "$HOME/dc-cache" "$HOME/dc-data" reports

      # Cache do DB NVD (evita re-download pesado a cada run)
      - name: Cache Dependency-Check DB
        uses: actions/cache@v4
        with:
          path: $HOME/dc-cache
          key: dc-db-${{ runner.os }}-v1
          restore-keys: |
            dc-db-${{ runner.os }}-

      # Sincroniza cache -> data para este run e remove locks do H2
      - name: Warm data dir from cache and remove H2 locks
        run: |
          rsync -a "$HOME/dc-cache/" "$HOME/dc-data/" || true
          rm -f "$HOME/dc-data"/*.lck "$HOME/dc-data"/*.lock "$HOME/dc-data"/*.trace.db || true
          find "$HOME/dc-data" -name "*.lobs.db" -type f -print -delete || true

      # Executa o scan usando o diretório 'data' isolado deste run
      - name: Run Dependency-Check (SARIF)
        # mantemos continue-on-error para o teste não ficar vermelho caso a NVD rate-limit
        continue-on-error: true
        run: |
          docker run --rm \
            -e NVD_API_KEY="${{ secrets.NVD_API_KEY }}" \
            -e JAVA_OPTS="-Xmx2g" \
            -v "$HOME/dc-data":/usr/share/dependency-check/data \
            -v "$PWD":/src \
            -v "$PWD/reports":/report \
            owasp/dependency-check:latest \
            --scan /src/02-seguranca-containers \
            --format "SARIF" --out /report --project "devsecops-app" \
            --failOnCVSS 0 \
            --cveValidForHours 24

      # Sincroniza de volta data -> cache (salva atualizações do DB) e limpa locks antes do cache persistir
      - name: Persist updated DB back to cache (and clean locks)
        if: ${{ always() }}
        run: |
          rm -f "$HOME/dc-data"/*.lck "$HOME/dc-data"/*.lock "$HOME/dc-data"/*.trace.db || true
          find "$HOME/dc-data" -name "*.lobs.db" -type f -print -delete || true
          rsync -a --delete "$HOME/dc-data/" "$HOME/dc-cache/" || true

      - name: List reports (debug)
        if: ${{ always() }}
        run: ls -lah reports || true

      - name: Upload Dependency-Check SARIF
        if: ${{ always() && hashFiles('reports/dependency-check-report.sarif') != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/dependency-check-report.sarif

      - name: Upload reports artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-reports
          path: reports/

  sonar:
    name: SonarQube scan (conditional)
    runs-on: ubuntu-latest
    needs: test
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    steps:
      - uses: actions/checkout@v4

      - name: SonarQube Scan
        if: ${{ env.SONAR_TOKEN != '' && env.SONAR_HOST_URL != '' }}
        uses: SonarSource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.organization=devjeffersonpiau
            -Dsonar.projectKey=devsecops-practical-tests
            -Dsonar.projectName=devsecops-practical-tests
            -Dsonar.sources=02-seguranca-containers
            -Dsonar.tests=02-seguranca-containers/tests
            -Dsonar.test.inclusions=**/tests/**
            -Dsonar.exclusions=**/tests/**
            -Dsonar.python.version=3.11
            -Dsonar.python.coverage.reportPaths=02-seguranca-containers/coverage.xml